actual_function= FUNCTION_NAME .
actual_parameter_list= '(' actual_value { ',' actual_value } ')' .
actual_procedure= PROCEDURE_NAME .
actual_value= expression .
actual_variable= variable .
addition_operator= '+' | '-' .
assignment_statement= variable ':=' expression .
base_type= type .
block= declaration_part statement_part .
bound_specification= NAME '..' NAME ':' ordinal_type_identifier .
compound_statement= BEGIN statement_sequence END .
conditional_statement= if_statement .
declaration_part= [ label_declaration_part ] [ variable_declaration_part ]
directive= FORWARD .
element_list= [ expression { ',' expression } ] .
element_type= type .
expression_list= expression { ',' expression } .
factor= NUMBER | STRING | '(' expression ')'.
field_list= [ fixed_part [ ';' ] .
fixed_part= record_section { ';' record_section } .
for_statement= FOR VARIABLE_NAME ':=' expression ( TO | DOWNTO )
  expression DO statement .
formal_parameter_list= '(' formal_parameter_section { ';' formal_parameter_section } ')' .
formal_parameter_section= value_parameter_section .
function_declaration= function_heading ';' block .
function_designator= FUNCTION_NAME [ actual_parameter_list ] .
function_heading= FUNCTION NAME [ formal_parameter_list ] ':' result_type .
identifier_list= NAME { ',' NAME } .
if_statement= IF expression THEN statement [ ELSE statement ] .
integer_number= NUMBER .
label_declaration_part= LABEL label { ',' label } ';' .
label= NUMBER .
lower_bound= constant .
multiplication_operator= '*' | '/'.
number= integer_number | real_number .
ordinal_type_identifier= TYPE_NAME .
output_value= expression .
parameter_type= TYPE_NAME .
procedure_and_function_declaration_part= { ( procedure_declaration
  | function_declaration ) ';' } .
procedure_declaration= procedure_heading ';' block .
procedure_heading= PROCEDURE NAME [ formal_parameter_list ] .
procedure_statement= PROCEDURE_NAME [ actual_parameter_list ] .
program_heading= PROGRAM NAME '(' identifier_list ')' ';' .
program= program_heading block '.' .
real_number= NUMBER .
record_section= identifier_list ':' type .
repeat_statement= REPEAT statement_sequence UNTIL expression .
repetitive_statement= while_statement | repeat_statement | for_statement .
result_type= TYPE_NAME .
expression= [ '+' | '-' ] term { addition_operator term } .
simple_statement= [ assignment_statement | procedure_statement ] .
simple_type= subrange_type.
statement_part= BEGIN statement_sequence END .
statement_sequence= statement { ';' statement } .
statement= [ LABEL ':' ] ( simple_statement | structured_statement ) .
structured_statement= compound_statement | repetitive_statement
  | conditional_statement .
subrange_type= lower_bound '..' upper_bound .
term= factor { multiplication_operator factor } .
type= simple_type | TYPE_NAME .
upper_bound= constant .
value_parameter_section= identifier_list ':' parameter_type .
variable_declaration_part= VAR variable_declaration ';' { variable_declaration ';' } .
variable_declaration= NAME ':' type .
variable_parameter_section= VAR NAME ':' parameter_type .
variable= VARIABLE_NAME.
variant= case_label_list ':' '(' field_list ')' .
while_statement= WHILE expression DO statement .